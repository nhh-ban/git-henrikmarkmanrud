library(tidyverse)    # Contains most of what we need.
library(stringr)
# The readLines()-function puts each line into a separate element in a character
# vector. Looking at ?readLines it seems that we only need to provide one
# argument: the "connection", or in other words the location of the text file.
# Replace the "?" below with the location of the file. We do get a warning that
# the file does not end with an "end of line"-character (EOL). This does not
# seem to pose a problem later, and it seems that we can silece the warning by
# switchin off the "warn"-argument. Do that if you wish.
raw_file <- readLines(con = "suites_dw_Table1.txt")
# trailing white spaces. The first step can be accomplished using the
# str_split()-function in the stringr-package (this is already loaded through
# tidyverse), but there is a delicate detail here. The "|"-character has special
# meaning in R ("or"), so it must be *escaped*, meaning that we tell R that it
# should be interpreted as a normal character. We do that by adding two forward
# slashes in front of it. This function returns a list, with one element for
# each input element. We only send one string in, and hence get only one list
# element out (check that!). We just unlist it to get out the vector. Then we
# apply the str_trim()-function (also in the stringr-package) to get rid of all
# the empty space. Replace the question mark below:
variable_names <-
str_split(string = raw_file[L-1], pattern = "\\|") %>%
unlist() %>%
str_trim()
comma_separated_values <-
raw_file[(L+1):length(raw_file)] %>%
gsub("\\|", ",", .) %>%
gsub(" ", "", .)
comma_separated_values_with_names <-
c(paste(variable_names, collapse = ","),
comma_separated_values)
# Replace the question mark and come up with a file name
cat(comma_separated_values_with_names, sep = "\n", file = "processed_data.txt")
# Read the file back in as a normal csv-file. The readr-package is part of
# tidyverse, so it is already loaded.
galaxies <- read_csv("processed_data")
# You should now have a nice, clean data frame with galaxies and their
# You should now have a nice, clean data frame with galaxies and their
# characteristics in memory. As of March 2022 it should contain 796
# ------------------------------------------------
library(tidyverse)    # Contains most of what we need.
library(stringr)
# The readLines()-function puts each line into a separate element in a character
# vector. Looking at ?readLines it seems that we only need to provide one
# argument: the "connection", or in other words the location of the text file.
# Replace the "?" below with the location of the file. We do get a warning that
# the file does not end with an "end of line"-character (EOL). This does not
# seem to pose a problem later, and it seems that we can silece the warning by
# switchin off the "warn"-argument. Do that if you wish.
raw_file <- readLines(con = "suites_dw_Table1.txt")
setwd("C:/Users/hemar/Documents/git-henrikmarkmanrud")
# The readLines()-function puts each line into a separate element in a character
# vector. Looking at ?readLines it seems that we only need to provide one
# argument: the "connection", or in other words the location of the text file.
# Replace the "?" below with the location of the file. We do get a warning that
# the file does not end with an "end of line"-character (EOL). This does not
# seem to pose a problem later, and it seems that we can silece the warning by
# switchin off the "warn"-argument. Do that if you wish.
raw_file <- readLines(con = "suites_dw_Table1.txt")
# What do you need to replace the two question marks with in order to extract
# the first two letters?
substr(x = raw_file, start = 1, stop = 2)
# The next step is then to find out *which* line starts with "--", and pick out
# the first one. This can be done in a nice little pipe, where you have to fill
# out the question marks and the missing function names:
L <-
(substr(x = raw_file, start = 1, stop = 2) == "--") %>%
which() %>%
min()
# Save the variable descriptions (i.e. the information in lines 1:(L-2)) in a
# text-file for future reference using the cat()-function. The first argument is
# the information that we want to print out. In order to get each element in the
# "raw_file"-vector on a separate line we also provide the sep-argument, where
# we put the "end-of-line"-character "\n". We also need to come up with a file
# name. Replace the question marks:
cat(raw_file[1:12], sep = "\n", file = "top_data.txt")
# trailing white spaces. The first step can be accomplished using the
# str_split()-function in the stringr-package (this is already loaded through
# tidyverse), but there is a delicate detail here. The "|"-character has special
# meaning in R ("or"), so it must be *escaped*, meaning that we tell R that it
# should be interpreted as a normal character. We do that by adding two forward
# slashes in front of it. This function returns a list, with one element for
# each input element. We only send one string in, and hence get only one list
# element out (check that!). We just unlist it to get out the vector. Then we
# apply the str_trim()-function (also in the stringr-package) to get rid of all
# the empty space. Replace the question mark below:
variable_names <-
str_split(string = raw_file[L-1], pattern = "\\|") %>%
unlist() %>%
str_trim()
comma_separated_values <-
raw_file[(L+1):length(raw_file)] %>%
gsub("\\|", ",", .) %>%
gsub(" ", "", .)
comma_separated_values_with_names <-
c(paste(variable_names, collapse = ","),
comma_separated_values)
# Replace the question mark and come up with a file name
cat(comma_separated_values_with_names, sep = "\n", file = "processed_data.txt")
# Read the file back in as a normal csv-file. The readr-package is part of
# tidyverse, so it is already loaded.
galaxies <- read_csv("processed_data")
# Read the file back in as a normal csv-file. The readr-package is part of
# tidyverse, so it is already loaded.
galaxies <- read_csv("processed_data.txt")
View(galaxies)
View(galaxies)
galaxies %>% ggplot(aes(x = "a_26"))
galaxies %>% ggplot(aes(x = "a_26") + geom_histogram()
galaxies %>% ggplot(aes(x = "a_26")) + geom_histogram()
galaxies %>% ggplot(aes(x = a_26)) + geom_histogram()
galaxies %>% filter(a_26 <= 11) %>% ggplot(aes(x = a_26)) + geom_histogram()
galaxies_filter %>% filter(a_26 <= 11)
galaxies_filter <- galaxies %>% filter(a_26 <= 11)
View(galaxies_filter)
galaxies %>% filter(a_26 <= 11) %>% ggplot(aes(x = a_26)) + geom_density()
galaxies %>% filter(a_26 <= 11) %>% ggplot(aes(x = a_26)) + geom_histogram()
rm(galaxies_filter)
galaxies %>% filter(D <= 11) %>% ggplot(aes(x = a_26)) + geom_histogram()
galaxies %>% filter(D <= 11) %>% ggplot(aes(x = a_26)) +
geom_histogram() +
xlab("Linear diameter of the galaxy in kpc") +
ylab("Count")
